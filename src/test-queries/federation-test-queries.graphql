# Apollo Federation Test Queries for Smart Mobility System
# These queries test cross-service resolution between User, Vehicle, and Trip services

# Query 1: Get trip with driver and vehicle information
query GetTripWithDriverAndVehicle($tripId: UUID!) {
  getTripById(id: $tripId) {
    id
    type
    status
    scheduledStartTime
    scheduledEndTime
    startTime
    endTime
    distance
    totalCost
    notes
    
    # This will resolve from User service via federation
    driver {
      id
      firstName
      lastName
      email
      phoneNumber
      licenseNumber
    }
    
    # This will resolve from Vehicle service via federation
    vehicle {
      id
      make
      model
      year
      licensePlate
      status
      color
      fuelType
      seatingCapacity
      gpsEnabled
    }
    
    startLocation {
      latitude
      longitude
      address
      city
      state
    }
    
    endLocation {
      latitude
      longitude
      address
      city
      state
    }
  }
}

# Query 2: Get all trips with minimal driver and vehicle info
query GetAllTripsWithBasicInfo {
  getAllTrips {
    id
    type
    status
    scheduledStartTime
    totalCost
    
    driver {
      id
      firstName
      lastName
      email
    }
    
    vehicle {
      id
      make
      model
      licensePlate
      status
    }
  }
}

# Query 3: Get user by ID (direct from User service)
query GetUserById($userId: UUID!) {
  getUserById(id: $userId) {
    id
    firstName
    lastName
    email
    phoneNumber
    licenseNumber
    createdAt
    updatedAt
  }
}

# Query 4: Get vehicle by ID (direct from Vehicle service)
query GetVehicleById($vehicleId: UUID!) {
  getVehicleById(id: $vehicleId) {
    success
    message
    data {
      id
      make
      model
      year
      licensePlate
      status
      vin
      color
      mileage
      fuelType
      seatingCapacity
      rentalPricePerDay
      gpsEnabled
      lastMaintenanceDate
      nextMaintenanceDate
    }
  }
}

# Query 5: Combined query testing multiple services
query GetCombinedData($tripId: UUID!, $userId: UUID!, $vehicleId: UUID!) {
  # From Trips service
  trip: getTripById(id: $tripId) {
    id
    type
    status
    totalCost
    driver {
      firstName
      lastName
    }
    vehicle {
      make
      model
      licensePlate
    }
  }
  
  # From User service
  user: getUserById(id: $userId) {
    id
    firstName
    lastName
    email
  }
  
  # From Vehicle service
  vehicle: getVehicleById(id: $vehicleId) {
    success
    data {
      make
      model
      status
    }
  }
}

# Mutation 1: Create a new trip
mutation CreateTrip($input: CreateTripInput!) {
  createTrip(input: $input) {
    id
    vehicleId
    driverId
    type
    status
    scheduledStartTime
    
    # Test federation on newly created trip
    driver {
      firstName
      lastName
      email
    }
    
    vehicle {
      make
      model
      licensePlate
    }
  }
}

# Mutation 2: Update trip status
mutation UpdateTripStatus($input: UpdateTripInput!) {
  updateTrip(input: $input) {
    id
    status
    startTime
    endTime
    
    driver {
      firstName
      lastName
    }
    
    vehicle {
      make
      model
      status
    }
  }
}

# Variables for testing:
# {
#   "tripId": "550e8400-e29b-41d4-a716-446655440000",
#   "userId": "550e8400-e29b-41d4-a716-446655440001", 
#   "vehicleId": "550e8400-e29b-41d4-a716-446655440002"
# }

# Create trip variables example:
# {
#   "input": {
#     "vehicleId": "550e8400-e29b-41d4-a716-446655440002",
#     "driverId": "550e8400-e29b-41d4-a716-446655440001",
#     "type": "RENTAL",
#     "scheduledStartTime": "2024-01-15T10:00:00",
#     "scheduledEndTime": "2024-01-15T18:00:00",
#     "startLocation": {
#       "latitude": 40.7128,
#       "longitude": -74.0060,
#       "address": "123 Main St",
#       "city": "New York",
#       "state": "NY",
#       "zipCode": "10001"
#     },
#     "endLocation": {
#       "latitude": 40.7589,
#       "longitude": -73.9851,
#       "address": "456 Broadway",
#       "city": "New York", 
#       "state": "NY",
#       "zipCode": "10019"
#     }
#   }
# }
